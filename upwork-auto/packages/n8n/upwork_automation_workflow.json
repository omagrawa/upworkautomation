{
  "name": "Upwork Automation Pipeline",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "upwork_ingest",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "upwork-ingest-webhook"
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/datasets/{{$json[\"datasetId\"]}}/items?clean=true&format=json&token={{$env.APIFY_TOKEN}}",
        "authentication": "none",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "fetch-apify-data",
      "name": "Fetch Apify Dataset",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Merge list and detail data by jobUrl, preferring detail fields\nconst items = $input.all();\nconst mergedJobs = [];\nconst jobMap = new Map();\n\n// First pass: collect all jobs by jobUrl\nfor (const item of items) {\n  const job = item.json;\n  if (!job.jobUrl) continue;\n  \n  const jobUrl = job.jobUrl;\n  if (!jobMap.has(jobUrl)) {\n    jobMap.set(jobUrl, {});\n  }\n  \n  const existing = jobMap.get(jobUrl);\n  \n  // Merge data, preferring detail fields\n  jobMap.set(jobUrl, {\n    ...existing,\n    ...job,\n    // Prefer detail fields when both exist\n    title: job.title || existing.title,\n    description: job.description || existing.description,\n    skills: job.skills || existing.skills,\n    clientSpending: job.clientSpending || existing.clientSpending,\n    clientJobs: job.clientJobs || existing.clientJobs,\n    location: job.location || existing.location,\n    // Keep list fields if detail doesn't exist\n    snippet: existing.snippet || job.snippet,\n    budget: existing.budget || job.budget,\n    hourly: existing.hourly || job.hourly,\n    posted: existing.posted || job.posted,\n    country: existing.country || job.country,\n    paymentVerified: existing.paymentVerified || job.paymentVerified,\n    proposals: existing.proposals || job.proposals\n  });\n}\n\n// Convert map to array\nfor (const [jobUrl, job] of jobMap) {\n  mergedJobs.push({\n    ...job,\n    jobUrl,\n    mergedAt: new Date().toISOString()\n  });\n}\n\nconsole.log(`Merged ${mergedJobs.length} unique jobs from ${items.length} items`);\n\nreturn mergedJobs.map(job => ({ json: job }));"
      },
      "id": "merge-job-data",
      "name": "Merge Job Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "check-storage-target",
              "leftValue": "={{ $env.STORAGE_TARGET }}",
              "rightValue": "postgres",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "storage-target-check",
      "name": "Storage Target Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": "public",
        "table": "upwork_jobs",
        "columns": "jobUrl, title, description, budget, hourly, posted, country, paymentVerified, proposals, skills, clientSpending, clientJobs, location, scrapedAt, mergedAt",
        "upsertColumns": "jobUrl",
        "additionalFields": {}
      },
      "id": "postgres-upsert",
      "name": "PostgreSQL Upsert",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "resource": "sheet",
        "operation": "upsert",
        "documentId": "={{ $env.SHEETS_ID }}",
        "sheetName": "upwork_jobs",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "jobUrl": "={{ $json.jobUrl }}",
            "title": "={{ $json.title }}",
            "description": "={{ $json.description }}",
            "budget": "={{ $json.budget }}",
            "hourly": "={{ $json.hourly }}",
            "posted": "={{ $json.posted }}",
            "country": "={{ $json.country }}",
            "paymentVerified": "={{ $json.paymentVerified }}",
            "proposals": "={{ $json.proposals }}",
            "skills": "={{ $json.skills ? $json.skills.join(', ') : '' }}",
            "clientSpending": "={{ $json.clientSpending }}",
            "clientJobs": "={{ $json.clientJobs }}",
            "location": "={{ $json.location }}",
            "scrapedAt": "={{ $json.scrapedAt }}",
            "mergedAt": "={{ $json.mergedAt }}"
          }
        },
        "options": {}
      },
      "id": "google-sheets-upsert",
      "name": "Google Sheets Upsert",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [1120, 400]
    },
    {
      "parameters": {
        "resource": "chat",
        "model": "gpt-4",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You score Upwork jobs 0–100 for a DevOps + AI/n8n expert. Penalize low budget (<$500 fixed or <$30/hr), >15 proposals. Boost payment verified, Jenkins/Maximo/n8n/LLMs/Docker/Cloudflare Workers/Supabase, US/UK/EU clients, client spend >$10k. Return JSON: {\"score\": int, \"reasons\": \"...\"} only."
            },
            {
              "role": "user",
              "content": "Score this job: Title: {{ $json.title }}, Description: {{ $json.description }}, Budget: {{ $json.budget }}, Hourly: {{ $json.hourly }}, Proposals: {{ $json.proposals }}, Payment Verified: {{ $json.paymentVerified }}, Country: {{ $json.country }}, Client Spending: {{ $json.clientSpending }}, Skills: {{ $json.skills ? $json.skills.join(', ') : '' }}"
            }
          ]
        },
        "options": {
          "temperature": 0.3
        }
      },
      "id": "openai-lead-score",
      "name": "OpenAI Lead Score",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1.3,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "jsCode": "// Parse OpenAI response and handle errors\nconst input = $input.first().json;\nlet score = 0;\nlet reasons = 'Error parsing score';\n\ntry {\n  // Try to parse JSON response from OpenAI\n  const response = input.choices?.[0]?.message?.content;\n  if (response) {\n    const parsed = JSON.parse(response);\n    score = parsed.score || 0;\n    reasons = parsed.reasons || 'No reasons provided';\n  }\n} catch (error) {\n  console.error('Error parsing OpenAI response:', error);\n  score = 0;\n  reasons = 'Failed to parse AI response';\n}\n\n// Add score data to the original job data\nconst jobData = $input.first().json;\n\nreturn {\n  json: {\n    ...jobData,\n    aiScore: score,\n    aiReasons: reasons,\n    scoredAt: new Date().toISOString()\n  }\n};"
      },
      "id": "parse-score",
      "name": "Parse Score",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "check-high-score",
              "leftValue": "={{ $json.aiScore }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "score-threshold-check",
      "name": "Score >= 70?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "resource": "chat",
        "model": "gpt-4",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "Write a concise Upwork proposal (120–180 words). Sections: (1) one-line value proposition tailored to the job, (2) three bullet wins aligned to requirements, (3) a 3-step mini-plan, (4) one relevant case link placeholder: {{CASE_LINK}}. No fluff. Mirror client keywords. Output plain text."
            },
            {
              "role": "user",
              "content": "Write a proposal for this job: Title: {{ $json.title }}, Description: {{ $json.description }}, Skills: {{ $json.skills ? $json.skills.join(', ') : '' }}, Budget: {{ $json.budget }}, Hourly: {{ $json.hourly }}"
            }
          ]
        },
        "options": {
          "temperature": 0.7
        }
      },
      "id": "openai-proposal-draft",
      "name": "OpenAI Proposal Draft",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1.3,
      "position": [2000, 200]
    },
    {
      "parameters": {
        "jsCode": "// Extract proposal text and handle errors\nconst input = $input.first().json;\nlet proposal = 'Failed to generate proposal';\n\ntry {\n  const response = input.choices?.[0]?.message?.content;\n  if (response) {\n    proposal = response.trim();\n  }\n} catch (error) {\n  console.error('Error extracting proposal:', error);\n  proposal = 'Error generating proposal';\n}\n\n// Add proposal to job data\nconst jobData = $input.first().json;\n\nreturn {\n  json: {\n    ...jobData,\n    proposal: proposal,\n    proposalGeneratedAt: new Date().toISOString()\n  }\n};"
      },
      "id": "extract-proposal",
      "name": "Extract Proposal",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2220, 200]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "resource": "sheet",
        "operation": "appendOrUpdate",
        "documentId": "={{ $env.SHEETS_ID }}",
        "sheetName": "upwork_automation_log",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "timestamp": "={{ new Date().toISOString() }}",
            "jobUrl": "={{ $json.jobUrl }}",
            "title": "={{ $json.title }}",
            "aiScore": "={{ $json.aiScore }}",
            "aiReasons": "={{ $json.aiReasons }}",
            "proposal": "={{ $json.proposal }}",
            "budget": "={{ $json.budget }}",
            "hourly": "={{ $json.hourly }}",
            "proposals": "={{ $json.proposals }}",
            "paymentVerified": "={{ $json.paymentVerified }}",
            "country": "={{ $json.country }}",
            "clientSpending": "={{ $json.clientSpending }}",
            "skills": "={{ $json.skills ? $json.skills.join(', ') : '' }}",
            "scrapedAt": "={{ $json.scrapedAt }}",
            "scoredAt": "={{ $json.scoredAt }}",
            "proposalGeneratedAt": "={{ $json.proposalGeneratedAt }}"
          }
        },
        "options": {}
      },
      "id": "log-to-sheets",
      "name": "Log to Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [2440, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "check-auto-submit",
              "leftValue": "={{ $env.AUTO_SUBMIT }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "auto-submit-check",
      "name": "Auto Submit Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2660, 200]
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/acts/{{ $env.APIFY_SUBMIT_ACTOR_ID }}/runs",
        "authentication": "none",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "upworkCredentials",
              "value": "={{ { username: $env.APIFY_USERNAME, password: $env.APIFY_PASSWORD } }}"
            },
            {
              "name": "jobData",
              "value": "={{ { jobId: $json.jobUrl.split('/').pop(), jobUrl: $json.jobUrl, title: $json.title } }}"
            },
            {
              "name": "proposalData",
              "value": "={{ { coverLetter: $json.proposal, bidAmount: $json.budget || 1000, timeline: '1-2 weeks' } }}"
            }
          ]
        },
        "options": {}
      },
      "id": "trigger-apify-submit",
      "name": "Trigger Apify Submit",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2880, 200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Jobs processed successfully', processed: $input.all().length } }}"
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [3100, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: false, message: 'Invalid webhook data', error: 'datasetId required' } }}"
      },
      "id": "error-response",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [680, 500]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "resource": "sheet",
        "operation": "appendOrUpdate",
        "documentId": "={{ $env.SHEETS_ID }}",
        "sheetName": "upwork_automation_log",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "timestamp": "={{ new Date().toISOString() }}",
            "jobUrl": "={{ $json.jobUrl }}",
            "title": "={{ $json.title }}",
            "aiScore": "={{ $json.aiScore }}",
            "aiReasons": "={{ $json.aiReasons }}",
            "proposal": "={{ 'Score too low - no proposal generated' }}",
            "budget": "={{ $json.budget }}",
            "hourly": "={{ $json.hourly }}",
            "proposals": "={{ $json.proposals }}",
            "paymentVerified": "={{ $json.paymentVerified }}",
            "country": "={{ $json.country }}",
            "clientSpending": "={{ $json.clientSpending }}",
            "skills": "={{ $json.skills ? $json.skills.join(', ') : '' }}",
            "scrapedAt": "={{ $json.scrapedAt }}",
            "scoredAt": "={{ $json.scoredAt }}",
            "proposalGeneratedAt": "={{ 'N/A' }}"
          }
        },
        "options": {}
      },
      "id": "log-low-score",
      "name": "Log Low Score",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [2000, 400]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Fetch Apify Dataset",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Apify Dataset": {
      "main": [
        [
          {
            "node": "Merge Job Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Job Data": {
      "main": [
        [
          {
            "node": "Storage Target Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Storage Target Check": {
      "main": [
        [
          {
            "node": "PostgreSQL Upsert",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Google Sheets Upsert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PostgreSQL Upsert": {
      "main": [
        [
          {
            "node": "OpenAI Lead Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets Upsert": {
      "main": [
        [
          {
            "node": "OpenAI Lead Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Lead Score": {
      "main": [
        [
          {
            "node": "Parse Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Score": {
      "main": [
        [
          {
            "node": "Score >= 70?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Score >= 70?": {
      "main": [
        [
          {
            "node": "OpenAI Proposal Draft",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Low Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Proposal Draft": {
      "main": [
        [
          {
            "node": "Extract Proposal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Proposal": {
      "main": [
        [
          {
            "node": "Log to Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log to Google Sheets": {
      "main": [
        [
          {
            "node": "Auto Submit Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Auto Submit Check": {
      "main": [
        [
          {
            "node": "Trigger Apify Submit",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Apify Submit": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Low Score": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "upwork-automation",
      "name": "upwork-automation"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}
